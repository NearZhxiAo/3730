#ifndef _INTERCMD_AUTOGEN_
#define _INTERCMD_AUTOGEN_
/*	This file is a autogenerate file .
 *	DONOT EDIT THIS FILE!!
 *  Edit intercmd_inter.ddf and intercmd.tpl instead
 */
#ifdef __cplusplus
extern "C"{
#endif
#include <stdio.h>
#include <stdlib.h>

enum unix_type {
	
	UNIX_FLASH
	,
	UNIX_MISC
	,
	UNIX_CLIENTPC
	,
	UNIX_STORAGE
	,
	UNIX_AVENC
	,
	UNIX_SERIAL_MANAGE
	,
	UNIX_QT
	
	,UNIX_END
};



#define UNIXFILE_SOCKET_FLASH  "/tmp/unix_socket_FLASH"

#define UNIXFILE_SOCKET_MISC  "/tmp/unix_socket_MISC"

#define UNIXFILE_SOCKET_CLIENTPC  "/tmp/unix_socket_CLIENTPC"

#define UNIXFILE_SOCKET_STORAGE  "/tmp/unix_socket_STORAGE"

#define UNIXFILE_SOCKET_AVENC  "/tmp/unix_socket_AVENC"

#define UNIXFILE_SOCKET_SERIAL_MANAGE  "/tmp/unix_socket_SERIAL_MANAGE"

#define UNIXFILE_SOCKET_QT  "/tmp/unix_socket_QT"

#define MAX_UNIXFILENAME_LENGTH	64
static char findcmd_unix_name[UNIX_END][MAX_UNIXFILENAME_LENGTH] = {
	UNIXFILE_SOCKET_FLASH
	,
	UNIXFILE_SOCKET_MISC
	,
	UNIXFILE_SOCKET_CLIENTPC
	,
	UNIXFILE_SOCKET_STORAGE
	,
	UNIXFILE_SOCKET_AVENC
	,
	UNIXFILE_SOCKET_SERIAL_MANAGE
	,
	UNIXFILE_SOCKET_QT
	
};

enum cmd_cat_type {
	
	CMD_CATEGORY_FLASH
	,
	CMD_CATEGORY_MISC
	,
	CMD_CATEGORY_CLIENTPC
	,
	CMD_CATEGORY_STORAGE
	,
	CMD_CATEGORY_AVENC
	,
	CMD_CATEGORY_SERIAL_MANAGE
	,
	CMD_CATEGORY_QT
	
};
#define MAX_CATEGORY_BITDEF		(6)
#define MAX_CATEGORY_INTERPARA_NUM	(1<<(MAX_CATEGORY_BITDEF))
enum paracmd_indicator_type {
	PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST = (CMD_CATEGORY_CLIENTPC << MAX_CATEGORY_BITDEF) + 1,
	PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN = (CMD_CATEGORY_CLIENTPC << MAX_CATEGORY_BITDEF) + 2,
	PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST = (CMD_CATEGORY_STORAGE << MAX_CATEGORY_BITDEF) + 1,
	PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME = (CMD_CATEGORY_STORAGE << MAX_CATEGORY_BITDEF) + 2,
	PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 1,
	PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 2,
	PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 3,
	PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 4,
	PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 5,
	PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 1,
	PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 2,
	PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 3,
	PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 4,
	PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 5,
	PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 1,
	PARACMD_QT_QT_TO_AVENC_INPUT_CCD = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 2,
	PARACMD_QT_QT_TO_SERIAL_MEASURE = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 3,
	PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 4,
	PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 5,
	PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 6,
	PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 7
	,PARACMD_END
};


static inline void produce_paracmd_value(void)
{
	printf("/**********************parameter_value define**********************/\n");
	printf("enum para_cmd_value \n{ \n");
	
	printf("PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST = 0x%x,", PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN = 0x%x,", PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST = 0x%x,", PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME = 0x%x,", PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED = 0x%x,", PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_AVENC_INPUT_CCD = 0x%x,", PARACMD_QT_QT_TO_AVENC_INPUT_CCD);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_SERIAL_MEASURE = 0x%x,", PARACMD_QT_QT_TO_SERIAL_MEASURE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST = 0x%x,", PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("};");
}
enum paracmd_category_base {
	PARACMD_FLASH_BASE = (CMD_CATEGORY_FLASH << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_MISC_BASE = (CMD_CATEGORY_MISC << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_CLIENTPC_BASE = (CMD_CATEGORY_CLIENTPC << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_STORAGE_BASE = (CMD_CATEGORY_STORAGE << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_AVENC_BASE = (CMD_CATEGORY_AVENC << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_SERIAL_MANAGE_BASE = (CMD_CATEGORY_SERIAL_MANAGE << MAX_CATEGORY_BITDEF) + 1
	,
	PARACMD_QT_BASE = (CMD_CATEGORY_QT << MAX_CATEGORY_BITDEF) + 1
	
};

enum paracmd_category_end {
    PARACMD_FLASH_END = PARACMD_FLASH_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_MISC_END = PARACMD_MISC_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_CLIENTPC_END = PARACMD_CLIENTPC_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_STORAGE_END = PARACMD_STORAGE_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_AVENC_END = PARACMD_AVENC_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_SERIAL_MANAGE_END = PARACMD_SERIAL_MANAGE_BASE  + (1<<MAX_CATEGORY_BITDEF)
    ,
    PARACMD_QT_END = PARACMD_QT_BASE  + (1<<MAX_CATEGORY_BITDEF)
    
};

#define PARACMD_BASE_GET(PARACMD)			(((PARACMD >> MAX_CATEGORY_BITDEF) << MAX_CATEGORY_BITDEF) + 1)
#define PARACATEGORY_GET(PARACMD)			((PARACMD >> MAX_CATEGORY_BITDEF))

enum paracmd_sendto_type {
	CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST_SENDTO_DEST =  (1 << UNIX_STORAGE ) ,
	CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN_SENDTO_DEST =  (1 << UNIX_STORAGE) ,
	STORAGE_STORAGE_TO_QT_FILE_LIST_SENDTO_DEST =  (1 << UNIX_QT )  ,
	STORAGE_STORAGE_TO_AVENC_DEC_FRAME_SENDTO_DEST =  (1 << UNIX_AVENC )  ,
	AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG_SENDTO_DEST =  (1 << UNIX_STORAGE )   ,
	AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	AVENC_AVENC_TO_STORAGE_START_STORAGE_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	AVENC_AVENC_TO_STORAGE_STOP_STORAGE_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED_SENDTO_DEST =  (1 << UNIX_AVENC )  ,
	SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD_SENDTO_DEST =  (1 << UNIX_AVENC )  ,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE_SENDTO_DEST =  (1 << UNIX_QT )  ,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS_SENDTO_DEST =  (1 << UNIX_QT )  ,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET_SENDTO_DEST =  (1 << UNIX_QT )  ,
	QT_QT_TO_AVENC_INPUT_INFRARED_SENDTO_DEST =  (1 << UNIX_AVENC )  ,
	QT_QT_TO_AVENC_INPUT_CCD_SENDTO_DEST =  (1 << UNIX_AVENC )  ,
	QT_QT_TO_SERIAL_MEASURE_SENDTO_DEST =  (1 << UNIX_SERIAL_MANAGE )  ,
	QT_QT_TO_STORAGE_START_LOOPBACK_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	QT_QT_TO_STORAGE_STOP_LOOPBACK_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	QT_QT_TO_STORAGE_CHECK_FILE_LIST_SENDTO_DEST =  (1 << UNIX_STORAGE )  ,
	QT_QT_TO_STORAGE_PAUSE_LOOPBACK_SENDTO_DEST =  (1 << UNIX_STORAGE ) | (1<<UNIX_AVENC) 
	,PARACMD_SENDTO_DEST_END
};
enum paracmd_sendto_flag_type {
	CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST_SENDTO_FLAG = 0,
	CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN_SENDTO_FLAG = 0,
	STORAGE_STORAGE_TO_QT_FILE_LIST_SENDTO_FLAG = 0,
	STORAGE_STORAGE_TO_AVENC_DEC_FRAME_SENDTO_FLAG = 0,
	AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG_SENDTO_FLAG = 0,
	AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG_SENDTO_FLAG = 0,
	AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK_SENDTO_FLAG = 0,
	AVENC_AVENC_TO_STORAGE_START_STORAGE_SENDTO_FLAG = 0,
	AVENC_AVENC_TO_STORAGE_STOP_STORAGE_SENDTO_FLAG = 0,
	SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED_SENDTO_FLAG = 0,
	SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD_SENDTO_FLAG = 0,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE_SENDTO_FLAG = 0,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS_SENDTO_FLAG = 0,
	SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET_SENDTO_FLAG = 0,
	QT_QT_TO_AVENC_INPUT_INFRARED_SENDTO_FLAG = 0,
	QT_QT_TO_AVENC_INPUT_CCD_SENDTO_FLAG = 0,
	QT_QT_TO_SERIAL_MEASURE_SENDTO_FLAG = 0,
	QT_QT_TO_STORAGE_START_LOOPBACK_SENDTO_FLAG = 0,
	QT_QT_TO_STORAGE_STOP_LOOPBACK_SENDTO_FLAG = 0,
	QT_QT_TO_STORAGE_CHECK_FILE_LIST_SENDTO_FLAG = 0,
	QT_QT_TO_STORAGE_PAUSE_LOOPBACK_SENDTO_FLAG = 0
	,PARACMD_SENDTO_FLAG_END
};

static inline void produce_cmd_value(void)
{
	printf("/**********************parameter_value define**********************/\n");
	printf("enum para_cmd_value \n{ \n");
	
	printf("PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST = 0x%x,", PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN = 0x%x,", PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST = 0x%x,", PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME = 0x%x,", PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE = 0x%x,", PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET = 0x%x,", PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED = 0x%x,", PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_AVENC_INPUT_CCD = 0x%x,", PARACMD_QT_QT_TO_AVENC_INPUT_CCD);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_SERIAL_MEASURE = 0x%x,", PARACMD_QT_QT_TO_SERIAL_MEASURE);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST = 0x%x,", PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST);
	printf("      /* %s */         \n",  "");
	
	printf("PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK = 0x%x,", PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK);
	printf("      /* %s */         \n",  "");
	
	printf("};");
}

typedef struct paracmd_sendto_array_
{
	unsigned int para_cmd;
	unsigned int para_send;
	unsigned int sendto_flag;
}Paracmd_Sendto_array; 
static  Paracmd_Sendto_array paracmd_sendto_array[]={
   { PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST,
	 CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST_SENDTO_DEST,
	 CLIENTPC_CLIENTPC_TO_STORAGE_FILE_LIST_SENDTO_FLAG
	}
	,
   { PARACMD_CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN,
	 CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN_SENDTO_DEST,
	 CLIENTPC_CLIENTPC_TO_STORAGE_CLEAN_SENDTO_FLAG
	}
	,
   { PARACMD_STORAGE_STORAGE_TO_QT_FILE_LIST,
	 STORAGE_STORAGE_TO_QT_FILE_LIST_SENDTO_DEST,
	 STORAGE_STORAGE_TO_QT_FILE_LIST_SENDTO_FLAG
	}
	,
   { PARACMD_STORAGE_STORAGE_TO_AVENC_DEC_FRAME,
	 STORAGE_STORAGE_TO_AVENC_DEC_FRAME_SENDTO_DEST,
	 STORAGE_STORAGE_TO_AVENC_DEC_FRAME_SENDTO_FLAG
	}
	,
   { PARACMD_AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG,
	 AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG_SENDTO_DEST,
	 AVENC_AVENC_TO_STORAGE_JPEG_BUFFER_NEW_MSG_SENDTO_FLAG
	}
	,
   { PARACMD_AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG,
	 AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG_SENDTO_DEST,
	 AVENC_AVENC_TO_STORAGE_VIDEO_BUFFER_NEW_MSG_SENDTO_FLAG
	}
	,
   { PARACMD_AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK,
	 AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK_SENDTO_DEST,
	 AVENC_AVENC_TO_STORAGE_VIDDEC_FRAME_ACK_SENDTO_FLAG
	}
	,
   { PARACMD_AVENC_AVENC_TO_STORAGE_START_STORAGE,
	 AVENC_AVENC_TO_STORAGE_START_STORAGE_SENDTO_DEST,
	 AVENC_AVENC_TO_STORAGE_START_STORAGE_SENDTO_FLAG
	}
	,
   { PARACMD_AVENC_AVENC_TO_STORAGE_STOP_STORAGE,
	 AVENC_AVENC_TO_STORAGE_STOP_STORAGE_SENDTO_DEST,
	 AVENC_AVENC_TO_STORAGE_STOP_STORAGE_SENDTO_FLAG
	}
	,
   { PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED,
	 SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED_SENDTO_DEST,
	 SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_INFRARED_SENDTO_FLAG
	}
	,
   { PARACMD_SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD,
	 SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD_SENDTO_DEST,
	 SERIAL_MANAGE_SERIAL_TO_AVENC_INPUT_CCD_SENDTO_FLAG
	}
	,
   { PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE_SENDTO_DEST,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_DISTANCE_SENDTO_FLAG
	}
	,
   { PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS_SENDTO_DEST,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_GPS_SENDTO_FLAG
	}
	,
   { PARACMD_SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET_SENDTO_DEST,
	 SERIAL_MANAGE_SERIAL_TO_QT_DISPLAY_MAGNET_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_AVENC_INPUT_INFRARED,
	 QT_QT_TO_AVENC_INPUT_INFRARED_SENDTO_DEST,
	 QT_QT_TO_AVENC_INPUT_INFRARED_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_AVENC_INPUT_CCD,
	 QT_QT_TO_AVENC_INPUT_CCD_SENDTO_DEST,
	 QT_QT_TO_AVENC_INPUT_CCD_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_SERIAL_MEASURE,
	 QT_QT_TO_SERIAL_MEASURE_SENDTO_DEST,
	 QT_QT_TO_SERIAL_MEASURE_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_STORAGE_START_LOOPBACK,
	 QT_QT_TO_STORAGE_START_LOOPBACK_SENDTO_DEST,
	 QT_QT_TO_STORAGE_START_LOOPBACK_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_STORAGE_STOP_LOOPBACK,
	 QT_QT_TO_STORAGE_STOP_LOOPBACK_SENDTO_DEST,
	 QT_QT_TO_STORAGE_STOP_LOOPBACK_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_STORAGE_CHECK_FILE_LIST,
	 QT_QT_TO_STORAGE_CHECK_FILE_LIST_SENDTO_DEST,
	 QT_QT_TO_STORAGE_CHECK_FILE_LIST_SENDTO_FLAG
	}
	,
   { PARACMD_QT_QT_TO_STORAGE_PAUSE_LOOPBACK,
	 QT_QT_TO_STORAGE_PAUSE_LOOPBACK_SENDTO_DEST,
	 QT_QT_TO_STORAGE_PAUSE_LOOPBACK_SENDTO_FLAG
	}
	,
	{0,0,0}
};

static inline unsigned int  find_sendto_dest_throw_cmd(unsigned int para_cmd)
{
	unsigned int index = 0;
	for ( index = 0; index < (sizeof(paracmd_sendto_array)/sizeof(Paracmd_Sendto_array)); index++ )
	{
		if ( paracmd_sendto_array[index].para_cmd == para_cmd )
		{
			return paracmd_sendto_array[index].para_send;
		}
	}
	return 0;
}

static inline unsigned int  find_sendflag_ofcmd(unsigned int para_cmd)
{
    unsigned int index = 0;
    for ( index = 0; index < (sizeof(paracmd_sendto_array)/sizeof(Paracmd_Sendto_array)); index++ )
    {
        if ( paracmd_sendto_array[index].para_cmd == para_cmd )
        {
            return paracmd_sendto_array[index].sendto_flag;
        }
    }
    return 0;
}
#ifdef __cplusplus
}
#endif

#endif // _INTERCMD_AUTOGEN_



