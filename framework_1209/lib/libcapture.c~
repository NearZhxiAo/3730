#include "libcapture.h"

Capture_Handle Capture_init(CaptureAttr *attr)
{
	Capture_Handle phandle = NULL;
	CaptureBuffer *capBufs = NULL;
	struct v4l2_capability cap;
	struct v4l2_cropcap cropCap;
	struct v4l2_crop crop;
	struct v4l2_format fmt;
	struct v4l2_requestbuffers req;
	struct v4l2_buffer *v4l2buf = NULL;
	v4l2_std_id std;
	unsigned int type;
	int  BufNum;
	int userAlloc;
	int ret = 0;
	int input = 0;
	int queryinput = 0;
	unsigned int bufindex = 0;
	unsigned int failCount = 0;

	if(attr == NULL)
	{
		SYS_WARNING("The CaptureAttr is null, use default attr.\r\n");
		SYS_WARNING("BufNum is %d, userAlloc is %s.\r\n", CAP_BUF_NUM, "false");
		BufNum = CAP_BUF_NUM;
		userAlloc = 0;
	}
	else
	{
		if(attr->bufNum <=0 || attr->bufNum >=10)
		{
			SYS_ERROR("attr->bufNum %d is not legal, use default attr\r\n",attr->bufNum);
			BufNum = CAP_BUF_NUM;
			userAlloc = attr->userAlloc;
		}
		else
		{
			BufNum = attr->bufNum;
			userAlloc = attr->userAlloc;
		}
	}

	phandle = malloc(sizeof(Capture_Object));

	if(phandle == NULL)
	{
		SYS_ERROR("malloc Capture_Object failed.\r\n");
		goto error;
	}

	phandle->capture_fd = open("/dev/video0", O_RDWR);
	if (phandle->capture_fd <= 0)
	{
		SYS_ERROR("open device /dev/video0 failed.\r\n");
		goto error;
	}

	input = TVP5146_AMUX_COMPOSITE;
	if (ioctl(phandle->capture_fd, VIDIOC_S_INPUT, &input) < 0)
	{
		SYS_ERROR("ioctl VIDIOC_S_INPUT failed.\r\n");
		goto error;
	}

	if (ioctl(phandle->capture_fd, VIDIOC_G_INPUT, &queryinput) < 0)
	{
		SYS_ERROR("ioctl VIDIOC_G_INPUT failed.\r\n");
		goto error;
	}

	if(input != queryinput)
	{
		SYS_ERROR("Attempt to set video input to %d, but it still has a setting of %d.\r\n",
				input, queryinput);
		goto error;
	}

#if 0
	std = VPFE_STD_AUTO;
	if(ioctl(phandle->capture_fd, VIDIOC_S_STD, &std) < 0)
	{
		SYS_ERROR("VPFE_STD_AUTO failed.\r\n");
		goto error;
	}

	do
	{
		ret = ioctl(phandle->capture_fd, VIDIOC_QUERYSTD, &std);
		if ((ret == -1) && errno == EAGAIN)
		{
			usleep(1);
			failCount++;
		}
	}while(ret == -1 && errno == EAGAIN && failCount < 100);
#endif

	std = V4L2_STD_NTSC;
	if (ioctl(phandle->capture_fd, VIDIOC_S_STD, &std) < 0)
	{
		SYS_ERROR("SET std failed.\r\n");
		goto error;
	}

	memset(&cap, 0x00, sizeof(cap));
	if (ioctl(phandle->capture_fd, VIDIOC_QUERYCAP, &cap) < 0)
	{
		if(errno == EINVAL)
		{
			SYS_ERROR("%s is no v4l2 device.\r\n","/dev/video0");
		}
		else
		{
			SYS_ERROR("ioctl VIDIOC_QUERYCAP failed.\r\n");
		}
		goto error;
	}

	if(!(cap.capabilities & V4L2_CAP_VIDEO_CAPTURE))
	{
		SYS_ERROR("%s is no video capture device.\r\n","/dev/video0");
		goto error;
	}

	if(!(cap.capabilities & V4L2_CAP_STREAMING))
	{
		SYS_ERROR("%s video capture device don't support streaming.\r\n","/dev/video0");
		goto error;
	}

	memset(&cropCap, 0x00, sizeof(cropCap));
	cropCap.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	if(ioctl(phandle->capture_fd, VIDIOC_CROPCAP, &cropCap) == -1 )
	{
		SYS_ERROR("crop cap failed.\r\n");
		goto error;
	}

	memset(&fmt, 0x00, sizeof(fmt));
	fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	if(ioctl(phandle->capture_fd, VIDIOC_G_FMT, &fmt) < 0 )
	{
		SYS_ERROR("g_fmt failed.( %s )\r\n", strerror(errno));
		goto error;
	}

	fmt.fmt.pix.width = 720;
	fmt.fmt.pix.height = 480;
	fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_UYVY;
	fmt.fmt.pix.bytesperline = 720*2;
	fmt.fmt.pix.field = V4L2_FIELD_INTERLACED;
	if(ioctl(phandle->capture_fd, VIDIOC_TRY_FMT, &fmt) < 0)
	{
		SYS_ERROR("try_fmt failed.( %s )\r\n", strerror(errno));
		goto error;
	}

	if(ioctl(phandle->capture_fd, VIDIOC_S_FMT, &fmt) < 0)
	{
		SYS_ERROR("s_fmt failed.( %s )\r\n", strerror(errno));
		goto error;
	}

	if(!userAlloc)
	{
		SYS_INFO("Driver alloc the capture buffer.\r\n");
		phandle->userAlloc = 0;
		memset(&req, 0x00, sizeof(req));
		req.count = BufNum;
		req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		req.memory = V4L2_MEMORY_MMAP;
		if (ioctl(phandle->capture_fd, VIDIOC_REQBUFS, &req) < 0 )
		{
			SYS_ERROR("VIDIOC_REQDQBUFS failed.\r\n");
			goto error;
		}

		if (req.count < BufNum)
		{
			if(!req.count)
			{
				SYS_ERROR("req.count is 0.\r\n", req.count);
				goto error;
			}
			else
			{
				SYS_WARNING("req.count = %d < %d\r\n", req.count, BufNum);
			}
		}

		capBufs = calloc(req.count, sizeof(CaptureBuffer));
		v4l2buf = calloc(req.count, sizeof(struct v4l2_buffer));

		if (capBufs == NULL || v4l2buf == NULL)
		{
			SYS_ERROR("malloc capbufs failed.\r\n");
			goto error;
		}

		for(bufindex = 0; bufindex < req.count; bufindex++)
		{
			memset(&v4l2buf[bufindex], 0x00, sizeof(struct v4l2_buffer));
			v4l2buf[bufindex].type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
			v4l2buf[bufindex].memory = V4L2_MEMORY_MMAP;
			v4l2buf[bufindex].index = bufindex;

			if (ioctl(phandle->capture_fd, VIDIOC_QUERYBUF, &v4l2buf[bufindex]) < 0)
			{
				SYS_ERROR("VIDIOC_QUERYBUF failed. index = %d.\r\n", bufindex);
				goto error;
			}

			capBufs[bufindex].length = v4l2buf[bufindex].length;
			capBufs[bufindex].physaddr = v4l2buf[bufindex].m.offset;
			capBufs[bufindex].index = bufindex;
			capBufs[bufindex].virtaddr = mmap(NULL, v4l2buf[bufindex].length, PROT_READ|PROT_WRITE, MAP_SHARED, phandle->capture_fd, v4l2buf[bufindex].m.offset);

			SYS_INFO("index %d length %d physaddr %x virtaddr %x.\r\n",
					bufindex,v4l2buf[bufindex].length, v4l2buf[bufindex].m.offset, capBufs[bufindex].virtaddr);
			if (capBufs[bufindex].virtaddr == MAP_FAILED)
			{
				SYS_ERROR("mmap failed. index = %d.\r\n", bufindex);
				goto error;
			}

			if (ioctl(phandle->capture_fd, VIDIOC_QBUF, &v4l2buf[bufindex]) < 0 )
			{
				SYS_ERROR("VIDIOC_QBUF failed.\r\n");
				goto error;
			}
		}
	}
	else
	{
		SYS_INFO("User alloc the capture buffer.\r\n");
		phandle->userAlloc = 1;
		if(CMEM_init() < 0)
		{
			SYS_ERROR("CMEM_init error.\r\n");
			goto error;
		}
		memset(&req, 0x00, sizeof(req));
		req.count = BufNum;
		req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		req.memory = V4L2_MEMORY_USERPTR;
		if (ioctl(phandle->capture_fd, VIDIOC_REQBUFS, &req) < 0 )
		{
			SYS_ERROR("VIDIOC_REQDQBUFS failed.\r\n");
			goto error;
		}

		if (req.count < BufNum)
		{
			if(!req.count)
			{
				SYS_ERROR("req.count is 0.\r\n", req.count);
				goto error;
			}
			else
			{
				SYS_WARNING("req.count = %d < %d\r\n", req.count, BufNum);
			}
		}

		capBufs = calloc(req.count, sizeof(CaptureBuffer));
		v4l2buf = calloc(req.count, sizeof(struct v4l2_buffer));

		if (capBufs == NULL || v4l2buf == NULL)
		{
			SYS_ERROR("malloc capbufs failed.\r\n");
			goto error;
		}

		for(bufindex = 0; bufindex < req.count; bufindex++)
		{
			memset(&v4l2buf[bufindex], 0x00, sizeof(struct v4l2_buffer));
			//char *data = CMEM_alloc((720*480*2 + 4*1024) & (~0xFFF), &cmem_param);
			char *data = CMEM_alloc(884736, &cap_cmem_param);
			if(data == NULL)
			{
				SYS_ERROR("CMEM_alloc error.");
				goto error;
			}

			v4l2buf[bufindex].index		= bufindex;
			v4l2buf[bufindex].type		= V4L2_BUF_TYPE_VIDEO_CAPTURE;
			v4l2buf[bufindex].memory	= V4L2_MEMORY_USERPTR;
			v4l2buf[bufindex].m.userptr = (int)data;
			//v4l2buf[bufindex].length	=  (720*480*2 + 4*1024) & (~0xFFF);
			v4l2buf[bufindex].length	=  884736;
			//int len	=  (720*480*2 + 4*1024) & (~0xFFF);

			capBufs[bufindex].length	= v4l2buf[bufindex].length;
			capBufs[bufindex].physaddr	= CMEM_getPhys(data);
			capBufs[bufindex].index		= v4l2buf[bufindex].index;
			capBufs[bufindex].virtaddr	= (void*)v4l2buf[bufindex].m.userptr;

			//SYS_INFO("len %d\r\n",len);
			SYS_INFO("index %d length %d physaddr %x virtaddr %x.\r\n",
					bufindex,v4l2buf[bufindex].length, v4l2buf[bufindex].m.offset, capBufs[bufindex].virtaddr);
			if (ioctl(phandle->capture_fd, VIDIOC_QBUF, &v4l2buf[bufindex]) < 0 )
			{
				SYS_ERROR("VIDIOC_QBUF failed.\r\n");
				goto error;
			}
		}

	}

	type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
#if 1
	if (ioctl(phandle->capture_fd, VIDIOC_STREAMON, &type) < 0 )
	{
		SYS_ERROR("stream on failed.\r\n");
		goto error;
	}
#endif

	phandle->capBufsPtr = capBufs;
	phandle->v4l2buf = v4l2buf;
	phandle->capBufsNum = req.count;
	return phandle;

error:
	SYS_ERROR("Capture_init error.\r\n");
	if(phandle != NULL)
	{
		if(phandle->capture_fd > 0)
		{
			close(phandle->capture_fd);
		}
		free(phandle);
	}
	if(capBufs != NULL)
	{
		free(capBufs);
	}
	return NULL;
}

int Capture_get(Capture_Handle phandle, CaptureBuffer *buffer)
{
	CaptureBuffer *capBufs = NULL;
	struct v4l2_buffer v4l2buf;

	if(buffer == NULL)
	{
		SYS_ERROR("The parameter CaptureBuffer can not be null.\r\n");
		return -1;
	}

	capBufs = phandle->capBufsPtr;

	memset(&v4l2buf, 0x00, sizeof(struct v4l2_buffer));
	v4l2buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	v4l2buf.memory = phandle->userAlloc ? V4L2_MEMORY_USERPTR : V4L2_MEMORY_MMAP;

	if (ioctl(phandle->capture_fd, VIDIOC_DQBUF, &v4l2buf) < 0)
	{
		SYS_ERROR("capture_get VIDIOC_DQBUF failed.\r\n");
		return -1;
	}

	buffer->virtaddr = capBufs[v4l2buf.index].virtaddr;
	buffer->physaddr = capBufs[v4l2buf.index].physaddr;
	buffer->length	= capBufs[v4l2buf.index].length;
	buffer->index	= capBufs[v4l2buf.index].index;

	return 0;
}

int Capture_put(Capture_Handle phandle, CaptureBuffer *buffer)
{
	struct v4l2_buffer *pbuf;

	pbuf = &phandle->v4l2buf[buffer->index];

	pbuf->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
	pbuf->m.userptr = buffer->virtaddr;

	if(ioctl(phandle->capture_fd, VIDIOC_QBUF, pbuf) < 0)
	{
		SYS_ERROR("capture_put vidioc_qbuf failed.\r\n");
		return -1;
	}

	return 0;
}

int Capture_destroy(Capture_Handle phandle)
{
	if(phandle != NULL)
	{
		if(phandle->capture_fd > 0)
		{
			close(phandle->capture_fd);
		}

		if(phandle->v4l2buf != NULL)
		{
			free(phandle->v4l2buf);
		}

		if(phandle->capBufsPtr != NULL)
		{
			free(phandle->capBufsPtr);
		}

		free(phandle);
	}

	return 0;
}
succeed_type CAPTURE_GET(Capture_Handle phandle,CaptureBuffer *buffer)
{

	return Capture_get(phandle, buffer);

}

succeed_type CAPTURE_PUT(Capture_Handle phandle,CaptureBuffer *buffer)
{

	returen Capture_get(phandle,buffer);
}

succeed_type CAPTURE_DESTROY(Capture_Handle phandle)
{

	return Capture_destroy(phandle);
}

